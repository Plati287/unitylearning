using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// Controlador del jugador, permite mover al jugador y controlar la cámara
public class PlayerController : MonoBehaviour
{
    // Configuración del movimiento del jugador
    public float moveSpeed = 5f; // Velocidad de movimiento del jugador

    // Configuración de la cámara (sensibilidad del ratón)
    public Vector2 sensibility = new Vector2(2f, 2f); // Sensibilidad del ratón en los ejes X (horizontal) y Y (vertical)

    // Referencias privadas
    private new Transform camera; // Referencia a la cámara del jugador
    private CharacterController characterController; // Controlador del personaje para el movimiento
    private float verticalRotation = 0f; // Almacena la rotación vertical de la cámara

    // Este método se ejecuta al inicio, una sola vez
    void Start()
    {
        // Bloquear el cursor al centro de la pantalla (como en un FPS)
        Cursor.lockState = CursorLockMode.Locked;

        // Buscar la cámara que debe ser un objeto hijo de este GameObject (el jugador)
        camera = transform.Find("Camera");

        // Obtener el componente CharacterController del jugador
        characterController = GetComponent<CharacterController>();

        // Si el jugador no tiene CharacterController, agregar uno
        if (characterController == null)
        {
            characterController = gameObject.AddComponent<CharacterController>();
        }
    }

    // Este método se ejecuta cada frame, es donde actualizamos el movimiento y la vista
    void Update()
    {
        // Llamamos al método que maneja el movimiento del jugador
        HandleMovement();

        // Llamamos al método que maneja la rotación de la cámara con el ratón
        HandleMouseLook();
    }

    // Método para mover al jugador usando las teclas WASD
    void HandleMovement()
    {
        // Verificar si el jugador está presionando alguna tecla para moverse
        bool isMovingForward = Input.GetKey(KeyCode.W);  // Tecla W presionada (adelante)
        bool isMovingBackward = Input.GetKey(KeyCode.S); // Tecla S presionada (atrás)
        bool isMovingLeft = Input.GetKey(KeyCode.A);     // Tecla A presionada (izquierda)
        bool isMovingRight = Input.GetKey(KeyCode.D);    // Tecla D presionada (derecha)

        // Crear un vector para almacenar la dirección del movimiento
        Vector3 moveDirection = Vector3.zero;

        // Si el jugador presiona la tecla W, mover hacia adelante
        if (isMovingForward)
        {
            moveDirection += transform.forward; // Mover hacia adelante
        }

        // Si el jugador presiona la tecla S, mover hacia atrás
        if (isMovingBackward)
        {
            moveDirection -= transform.forward; // Mover hacia atrás
        }

        // Si el jugador presiona la tecla D, mover hacia la derecha
        if (isMovingRight)
        {
            moveDirection += transform.right; // Mover hacia la derecha
        }

        // Si el jugador presiona la tecla A, mover hacia la izquierda
        if (isMovingLeft)
        {
            moveDirection -= transform.right; // Mover hacia la izquierda
        }

        // Normalizamos el vector de movimiento para evitar que el jugador se mueva más rápido en diagonales
        if (moveDirection.magnitude > 0)
        {
            moveDirection = moveDirection.normalized;
        }

        // Calculamos el movimiento final multiplicando por la velocidad y el tiempo entre frames
        Vector3 finalMovement = moveDirection * moveSpeed * Time.deltaTime;

        // Añadimos gravedad al movimiento (evita que el jugador flote)
        finalMovement.y = -9.81f * Time.deltaTime;

        // Movemos al jugador usando el CharacterController (gestiona colisiones)
        characterController.Move(finalMovement);
    }

    // Método para manejar la rotación de la cámara con el ratón
    void HandleMouseLook()
    {
        // Obtener la cantidad de movimiento del ratón
        float mouseX = Input.GetAxis("Mouse X"); // Movimiento del ratón en el eje X (horizontal)
        float mouseY = Input.GetAxis("Mouse Y"); // Movimiento del ratón en el eje Y (vertical)

        // Rotación horizontal: mover el cuerpo del jugador a la izquierda o derecha
        if (mouseX != 0) // Solo rotar si el ratón se mueve
        {
            transform.Rotate(Vector3.up * mouseX * sensibility.x); // Rotar en el eje Y (horizontal)
        }

        // Rotación vertical: mover la cámara hacia arriba o abajo
        if (mouseY != 0) // Solo rotar si el ratón se mueve
        {
            verticalRotation -= mouseY * sensibility.y; // Restamos para invertir el control

            // Limitar la rotación vertical para que la cámara no gire 360°
            verticalRotation = Mathf.Clamp(verticalRotation, -25f, 35f);

            // Aplicamos la rotación vertical a la cámara, no al cuerpo del jugador
            camera.localEulerAngles = Vector3.right * verticalRotation;
        }
    }
}

ruta
capsula
    camara
